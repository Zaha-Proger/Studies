<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
	<head>
		<title>Script Modules</title>
		<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
		<link rel="stylesheet" type="text/css" href="styleNormal.css">
	</head>
	<body>

<!-- ******************************** -->
<p class="MainHeading1">Script Modules - Web Views</p>
<hr>

<!-- ******************************** -->
<p class="MainHeading2">Web Views</p>

<p>Web views are using the QWebEngine functionality to render HTML5. Script Modules use web views to create custom interfaces in PT.  It can include html, css, images, and js files.  See Custom Interface tab in Scripting Interface in a previous section.</p>

<p>Each Script Module has a Web View Manager, which allows multiple web views.  Each web view is owned by only one Script Module; no two Script Modules can own a web view at the same time.  Web views can access IPC calls the same way as in the Script Engine, with the exception that events and delegates are not supported in web views.</p>


<!-- ******************************** -->
<p class="MainHeading3">Script Engine and Web View Communication</p>

<p>The Script Engine has access to the Script Module's <strong>webViewManager</strong>. Using this object, one can use the built-in webviews in PT or create new webviews that open up as seperate windows.</p>

<table class="tableCode">
  <tr><th>In Script Engine</th></tr>
  <tr><td class="TDtableCode"><pre>

// create a new web view with width and height and assign it to a variable
var newWebView = webViewManager.createWebView("window title", "http://www.cisco.com", 600, 400);
newWebView.show();
...
// change url
newWebView.setUrl("http://cisco.netacad.net");

     </pre> </td> </tr>
</table>


<p>Other calls to manipulate the web view are also available, such as change title, size, window flags and modality.</p>
<p>The Script Engine can also ask a web view to evaluate a JavaScript statement.</p>


<table class="tableCode">
  <tr><th>In Script Engine</th></tr>
  <tr><td class="TDtableCode"><pre>

newWebView.evaluateJavaScriptAsync("alert('hello')");

     </pre></td></tr>
</table>


<p>This method is the main way for the Script Engine to talk to web views -- ask the web view to evaluate JavaScript statements to show some interface changes.</p>
<p>Web views can also communicate with the Script Engine, using the <strong>$se()</strong> built-in function.</p>


<table class="tableCode">
  <tr><th>In Script Engine</th></tr>
  <tr><td class="TDtableCode"><pre>

function doSomething(argInt, argStr, argBool)
{ ... }

        </pre> </td> </tr>
</table>


<table class="tableCode">
  <tr><th>In Custom Interface</th></tr>
  <tr><td class="TDtableCode"><pre>

&lt;html&gt;
...
&lt;script&gt;
function onClick()
{
    // call doSomething function in Script Engine with 3 arguments
    $se("doSomething", 1, "some string", true);
}
&lt;/script&gt;
...
&lt;/html&gt;

          </pre> </td> </tr>
</table>

<a name="webViewVar"></a>
<br/>
<p>Each web view has a <strong>webView</strong> variable that is the IPC object of itself (<a href="faqTroubleShoot.htm#spec_170">see FAQ</a>). A webview can use that variable to change its own properties. </p>


<table class="tableCode">
  <tr><th>In Custom Interface</th></tr>
  <tr><td class="TDtableCode"><pre>&lt;html&gt;
...
&lt;script&gt;
function onClick()
{
    webView.ipcCallArgsAsync("setUrl", ["http://www.cisco.com"]);
}
&lt;/script&gt;
...
&lt;/html&gt;</pre>
    </td>
  </tr>
</table>


<p>&nbsp;</p>
<p>There might be cases when the custom interface asks the Script Engine to do a task, and upon completing the task or on event, the Script Engine calls back a function in the custom interface.  Because there can be multiple web views owned by the Script Module, we need a way to identify the different web views.  Each web view has a web view ID that it can pass to the Script Engine along with the name of a function call.  The Script Engine can use this ID to look up and call the function in that web view.</p>


<table class="tableCode">
  <tr><th>In Custom Interface</th></tr>
  <tr><td class="TDtableCode"><pre>

&lt;html&gt;
...
&lt;script&gt;

webView.ipcCallAsync("getWebViewId", (webViewId) => {
    $se("doSomething", webViewId, callbackFunc);
});
...
function callbackFunc(argInt, argStr)
{ ... }


// Or providing a callback inline: 


webView.ipcCallAsync("getWebViewId", (webViewId) => {
    $se("doSomething", webViewId, (...) => {
        ...
    });
});

&lt;/script&gt;
...
&lt;/html&gt;

          </pre> </td> </tr>
</table>




<table class="tableCode">
  <tr><th>In Script Engine</th></tr>
  <tr>
    <td class="TDtableCode"><pre>function doSomething(webViewId, callbackFunc)
{
    ...
    var webView = webViewManager.getWebView(webViewId);
    $wvca(webView, callbackFunc, 123, "hello");
}</pre>
    </td>
  </tr>
</table>


<p>&nbsp;</p>
<p>A shortcut function <strong>$wvca()</strong> can be used as an alternative to web view's <strong>evaluateJavaScriptAsync()</strong>.</p>
<p></p>

<p class="MainHeading3">Custom Interface URL Scheme</p>
<p>To point a web view to a custom interface in Script Modules, use this scheme: <i>scriptModuleID</i>:<i>customInterfaceID</i>.  There are two predefined Script Module IDs:</p>
<ul>
    <li><strong>this-sm</strong> - points to a custom interface in this Script Module; this-sm:Interface0.htm</li>
    <li><strong>file-sm</strong> - points to a custom interface in the File Script Module; file-sm:Interface0.htm</li>
</ul>
<p>It can also point to a custom interface in a different Script Module by using the other Script Module's ID: net.netacad.cisco.PcChat:chat.htm.</p>


<table class="tableCode">
  <tr><th>In Script Engine</th></tr>
  <tr><td class="TDtableCode"><pre>

webView.setUrl("this-sm:Interface0.htm");
...
webView.setUrl("net.netacad.cisco.PcChat:chat.htm");

        </pre> </td> </tr>
</table>


<p>This also works from links inside the web views.</p>


<table class="tableCode">
  <tr><th>In Custom Interface</th></tr>
  <tr><td class="TDtableCode"><pre>

&lt;a href="this-sm:Interface0.htm"&gt;htm in this Script Module&lt;/a&gt;
&lt;a href="file-sm:Interface0.htm"&gt;htm in the File Script Module&lt;/a&gt;
&lt;a href="net.netacad.cisco.PcChat:chat.htm"&gt;htm in another Script Module&lt;/a&gt;

        </pre> </td> </tr>
</table>


<p>If the target link is in the same Script Module, the ID can be omitted.</p>


<table class="tableCode">
  <tr><th>In Custom Interface</th></tr>
  <tr><td class="TDtableCode"><pre>

&lt;a href="Interface0.htm"&gt;htm in this Script Module&lt;/a&gt;

        </pre> </td> </tr>
</table>


<p>After pointing a web view to load a custom interface in another Script Module, this Script Module no longer owns the web view, and will not have access to the web view any more.  This is to enforce the sandbox for each Script Module and to prevent hijacking of web views after the page goes to a different Script Module. </p>
<p>&nbsp;</p>

<p>Images, css, and js files should be imported to the Script Module's Custom Interface using the Import button. Once resources are imported, the custom interface can load them using standard HTML tags. External resources may not be resolved if an absolute path is not supplied.</p>


<table class="tableCode">
  <tr><th>In Custom Interface</th></tr>
  <tr>
    <td class="TDtableCode"><pre>&lt;html&gt;
...
&lt;link type="text/css" href="jquery-ui-1.8.7.custom.css" rel="stylesheet" /&gt;
&lt;script type="text/javascript" src="jquery-1.4.4.min.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" src="jquery-ui-1.8.7.custom.min.js"&gt;&lt;/script&gt;
...
&lt;/html&gt;</pre>
    </td>
  </tr>
</table>


<p>&nbsp;</p>

<p class="MainHeading3">PT Built-In Web Views</p>
<p>There are two built-in web views in PT at the current time, the activity file instructions window and the device dialog.</p>
<p>&nbsp;</p>

<p class="MainHeading4">Activity File Instructions Window</p>
<p>The activity file instructions window always renders the instructions set for the activity file.  So the user can use the same instructions tab in Activity Wizard to edit this.  The File Script Module is the owner of this web view.</p>
<p>&nbsp;</p>

<p class="MainHeading4">Device Dialog</p>
<p>Each device dialog has a new tab with a web view that has direct access to the device.  It has a <strong>device</strong> variable built-in that is the device's IPC object.  So, within this web view, the custom interface can do the following.</p>


<table class="tableCode">
  <tr><th>In Custom Interface</th></tr>
  <tr>
    <td class="TDtableCode"><pre>

&lt;html&gt;
...
&lt;script&gt;
device.ipcCallSeqAsync( "getPort", ["FastEthernet"], "setIpSubnetMask", ["1.1.1.1", "255.0.0.0"] );
&lt;/script&gt;
...
&lt;/html&gt;

        </pre> </td> </tr>
</table>


<p>The default custom interface to render in each device's dialog can only be selected using the PT GUI. However, once a Script Module has ownership of the device dialog's web view, it can use <strong>setUrl()</strong> in the Script Module code to change the custom interface.  The PT GUI allows changing the device dialog custom interface for this file only or for the PT globally.  Go to Extensions->Scripting->Config File Custom Interface for this file, and Extensions->Scripting->Config Global Custom Interface or go to Custom Interfaces tab in Options->Preferences for the PT globally. </p>
<p class="myPic">
<img src="images/scriptModules_configFileCustomInterfaces.jpg">
</p>
<p>&nbsp;</p>
<p class="myPic">
<img src="images/scriptModules_configGlobalCustomInterfaces.jpg">
</p>
<p>&nbsp;</p>
<p>PT is packaged with a PcSoftware Script Module for the PC device dialog's Software/Services tab similar to the one in Cisco Aspire Game.  It also comes with a separate Script Module for a new feature, PcChat, to be added to the main page of the PcSoftware Script Module.  Because Script Modules work in a sandbox and cannot see or change anything about another Script Module, we send messages from PcChat to PcSoftware to register itself when it starts.</p>


<table class="tableCode">
  <tr><th>In PcChat Script Module</th></tr>
  <tr><td class="TDtableCode"><pre>
function main()
{
    ipc.ipcManager().sendMessageTo("net.netacad.cisco.PcSoftware", "ADD_SOFTWARE,Chat,net.netacad.cisco.PcChat:chat.htm");
}
  </pre>
    </td>
  </tr>
</table>


<p>Software in Script Modules developed by others can do the same and add themselves to the PC's Software/Services automatically.</p>
<p>&nbsp;</p>

<p class="MainHeading4">Custom Interface IPC API Reference</p>
<p>As some code examples above demonstrate, PT run-time objects can be accessed and manipulated from custom interface code using IPC. This section provides a full list of the API calls that can be used for this purpose. </p>
<p>It is important to note that all API calls are asynchronous in nature and any results they may return must be processed by the custom interface code inside a suitable callback.  </p> 
<p>
In the code below the following terms are used:
</p><p>
<table  class="tableCode">
<tr>
    <td  class="TDtableCode"><em>object</em></td> 
    <td  class="TDtableCode">refers to an IPC object being accessed.</td> 
</tr>
<tr>
    <td  class="TDtableCode"><em>callName</em></td> 
    <td  class="TDtableCode">refers to a string name[s] of the IPC call[s].  </td> 
</tr>
<tr>
    <td  class="TDtableCode"><em>cb</em></td> 
    <td  class="TDtableCode">a custom code callback function that will receive any results returned by the IPC call.</td> 
</tr>
<tr>
    <td  class="TDtableCode"><em>cbThis</em></td> 
    <td  class="TDtableCode">an object that will can be accessed via 'this' inside the callback code.</td> 
</tr>
<tr>
    <td  class="TDtableCode"><em>[args]</em></td> 
    <td  class="TDtableCode">designates a context-appropriate array object containing an argument list for the call at hand.</td> 
</tr>
</table>
</p>


<table class="tableCode">
    <tr><td>IPC Object API</td></tr>
    <tr>
        <td class="TDtableCode"><strong><pre>
object.ipcCallAsync( callName, cb )
            </pre></strong>
<pre>
Examples: 
    device.ipcCallAsync( "getName", (deviceName) => {...} )
</pre>
        </td> 
    </tr>
    <tr>
        <td class="TDtableCode"><strong><pre>
object.ipcCallArgsAsync( callName, [args], cb )
            </pre></strong>

<pre>
Examples:                 
    currentDir.ipcCallArgsAsync( "addTextFile", [fileName, fileContent, false], (b_added) => {...} )<br/>
NOTE! If a call does not require any arguments an empty array must be passed in.
</pre>
        </td> 
    </tr>
    <tr>
        <td class="TDtableCode"><strong>
            <pre>
object.ipcCallSeqAsync( callName1, [args1], ... , callNameN, [argsN], cb ) [1]
object.ipcCallSeqAsync( "callName1. ... .callNameN", [argsN], cb )         [2]
        </pre></strong>

<pre>
Examples: 
    device.ipcCallSeqAsync('getProcess', ['FileManager'], 'getFileSystem', ['c:'], (fs) => {...} ) [1]
    device.ipcCallSeqAsync('getProcess', ['FileManager'], 'getFileSystem', ['c:'], (fs) => {...} ) [1]
    usbPort.ipcCallSeqAsync('getController', 'setSerialMonitoring', [true])                        [2]
    ipc.ipcCallSeqAsync("appWindow.setClipboardText",[text])

<em>[args]</em> for each call are optional and may be omitted, as per the call specification.
Here's an example:
    usbPort.ipcCallSeqAsync('getController', 'setSerialMonitoring', [true]);
</table>

The following is a higher level <strong>IpcCallAsync</strong> API built on top of the above IPC Object API.
<p>&nbsp;</p>
<p> </p>

<table class="tableCode">
    <tr><td>IpcCallAsync API</td></tr>

    <tr>
        <td class="TDtableCode"><pre>
<strong>
IpcCallAsync( object, callName1, [args1], ... , callNameN, [argsN] ) 
</strong>
            </pre>
A class enabling this high level API. Arguments following 'object' are like those for ipcCallSeqAsync.
<pre>
Example: 
    new IpcCallAsync(ipc, 'network.getDeviceAt', [0], 'setName', ['Router 1']);

            </pre>
        </td> 
    </tr>


    <tr>
        <td class="TDtableCode"><pre>
<strong>
IpcCallAsync.withResult( cb, cbThis )
</strong>
</pre>
Allows to run a callback with the result of the encapsulated asynchronous IPC call.
	Callback receives a result of the IPC calls as its first parameter.
<pre>
Examples:
    var call = new IpcCallAsync(ipc, 'network.getDeviceAt', [0], 'setName', ['Router 1']);
    call.withResult(cb, cbThis);

    var call = new IpcCallAsync(ipc, 'network.getDeviceAt', [0]);
    call.withResult(cb, cbThis); // cb is called with a device IPC object as its first parameter.
            </pre>
        </td> 
    </tr>

    <tr>
        <td class="TDtableCode"><pre>
<strong>
IpcCallAsync.withResult( cb, cbThis )
</strong>
</pre>
Allows to run a callback with on the combined results of multiple independent(!) IPC calls. Callback receives an object with the same fields as input, but the values of these fields are the results of their respective IPC calls executed. Input structure can use any number of IpcCallAsync instances as long as they are independent from one another. The order in which such calls are executed is undefined.  
<pre>
Examples:
    IpcCallAsync.withAllResults( {
        aWin:     new IpcCallAsync(ipc, 'appWindow'),
        lw:       new IpcCallAsync(ipc, 'appWindow.getActiveWorkspace.getLogicalWorkspace'),
        devCount: new IpcCallAsync(ipc, 'network.getDeviceCount') 
    }, function( r ) {
        // r.aWin		 - is IPC object for application window 
        // r.devCount  - is the count of all devices in the network
        // r.lw 		 - is the logical workspace IPC object 
        r.lw.ipcCallAsync('getCanvasNoteIds', function(itemIDs){
            for(var ind = 0; ind &lt; itemIDs.length; ++ind){ // process array of itemIDs
              ... ;
            }
        }, this);
    });
            </pre>

        </td> 
    </tr>

    <tr>
        <td class="TDtableCode"><pre>
<strong>
IpcCallAsync.wait(cb, cbThis)
&nbsp;
IpcCallAsync.waitNamed(name, cb, cbThis)
</strong>
</pre>
Allows to wait for all pending IPC calls issued prior to this <em>wait</em> call. One can issue asynchronous IPC calls, by any of the above means, and then delay a given callback until they all complete.  Nothing is passed to the callback as the result of this call. <em>IpcCallAsync.waitNamed</em> take a <em>name</em> parameter, which is just a name for the "wait section". It is primarily usefile for visual identification of the relevant code and it is also used when run-time exceptions are reported.  
<pre>
Examples:
    object1.ipcCallAsync('someMethod', cb1, cbThis1);
    object2.ipcCallAsync('someMethod', cb2, cbThis2);
    IpcCallAsync.wait(cb_wait, cb1This); <em>// cb_wait will be called after cb1 and cb2 have been called</em>
</pre>


        </td> 
    </tr>

</table>

</body>
</html>
